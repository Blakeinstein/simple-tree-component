{"version":3,"file":"simple-tree-component.js","sources":["../src/types/options.ts","../src/ui/ui-constants.ts","../src/ui/key-event-handler.ts","../src/ui/utils.ts","../src/ui/base-tree.ts","../src/event/event-manager.ts","../src/types/tree-node.ts","../src/validation/validation.ts","../src/data/data-service.ts","../src/ui/common-tree-logic.ts","../src/ui/overlay-placement.ts","../src/ui/common-dropdown-tree-logic.ts","../src/ui/single-select-dropdown.ts","../src/ui/multi-select-dropdown.ts","../src/ui/tree-view.ts","../src/factory.ts","../src/index.ts"],"sourcesContent":["import { TreeNode } from \"./tree-node\";\n\n/**\n * @ignore\n */\nexport type ComponentMode = \"tree\" | \"singleSelectDropdown\" | \"multiSelectDropdown\";\n\n/**\n * @ignore\n */\nexport interface TreeConfiguration {\n    /**\n     * Add a searchbar to search for tree-nodes. (Default: `true`)\n     */\n    searchBar: boolean;\n\n    /**\n     * Determines if the searchbar requests the focus by default. (Default: `false`)\n     */\n    searchBarFocus: boolean;\n\n    /**\n     * Enables text-highlighting while searching. (Default: `false`)\n     */\n    highlightSearchResults: boolean;\n\n    /**\n     * A watermark text which is displayed if no value is selected.\n     * Only used in modes `singleSelectDropdown` and `multiSelectDropdown`.\n     * (Default: `Please select a value...`)\n     */\n    watermark: string;\n\n    /**\n     * A message text which is displayed if no tree-nodes are available at all or through filtering.\n     * (Default: `No items found.`)\n     */\n    noNodesMessage: string;\n\n    /**\n     * Custom css-classes.\n     */\n    css: {\n        /**\n         * Custom css-class added to the dropdown-container element.\n         * Only used in modes `singleSelectDropdown` and `multiSelectDropdown`.\n         * (Default: `\"\"`)\n         */\n        dropdownHolder: string;\n    };\n\n    /**\n     * Template function which is called if the given node is selected.\n     * Only used in modes `singleSelectDropdown` and `multiSelectDropdown`.\n     * @param node The tree-node to return a text-value for.\n     * @returns Any string value which should be displayed. (Default: `node.label`)\n     */\n    templateSelectedText: (node: TreeNode) => string;\n\n    /**\n     * Checkbox settings.\n     * Only used in mode `tree`.\n     */\n    checkboxes: {\n        /**\n         * Enable checkboxes. This also enables multi-selection.\n         * (Default: `false`)\n         */\n        active: boolean;\n\n        /**\n         * Indicates if the checkbox-value of a parent-node should also change the value of its childs.\n         * (Default: `false`)\n         */\n        recursive?: boolean;\n    };\n\n    /**\n     * Add a cross-button to clear the current value(s). (Default: `false`)\n     */\n    clearButton: boolean;\n\n    /**\n     * Element to prevent scrolling for when the dropdown is openend. (Default `null`)\n     */\n    scrollContainer: HTMLElement | null;\n}\n\n/**\n * All instance-specific options and behaviors to initialize the tree.\n */\nexport interface BaseOptions extends TreeConfiguration {\n    /**\n     * All tree-node data-objects to start with. Do not change this array afterwards.\n     * (Default: `[]`)\n     */\n    nodes: TreeNode[];\n}\n\n/**\n * @ignore\n */\nexport const defaults: BaseOptions = {\n    nodes: [],\n    searchBar: true,\n    searchBarFocus: false,\n    highlightSearchResults: false,\n    watermark: \"Please select a value...\",\n    noNodesMessage: \"No items found.\",\n    css: {\n        dropdownHolder: \"\",\n    },\n    templateSelectedText: (node: TreeNode) => node.label,\n    checkboxes: {\n        active: false,\n        recursive: false,\n    },\n    clearButton: false,\n    scrollContainer: null,\n};\n\n/**\n * A partial representation of `BaseOptions`. All other values are set to its defaults.\n */\nexport type Options = Partial<BaseOptions>;\n","export default {\n    classNames: {\n        SimpleTree: \"simple-tree\",\n        SimpleTreeReadOnly: \"simple-tree-readonly\",\n        SimpleTreeViewOnly: \"simple-tree-view-only\",\n        SimpleTreeDropdownHolder: \"simple-tree-dropdown-holder\",\n        SimpleTreeSingleSelectBox: \"simple-tree-single-selectbox\",\n        SimpleTreeMultiSelectBox: \"simple-tree-multi-selectbox\",\n        SimpleTreeInputContainer: \"simple-tree-input-container\",\n        SimpleTreePillboxHolder: \"simple-tree-pillbox-holder\",\n        SimpleTreePillboxCross: \"simple-tree-pillbox-cross\",\n        SimpleTreeCross: \"simple-tree-cross\",\n        SimpleTreeClearable: \"simple-tree-clearable\",\n        SimpleTreeSelectedLabel: \"simple-tree-selected-label\",\n        SimpleTreeSelectedLabelWatermark: \"simple-tree-selected-label-watermark\",\n        SimpleTreeChevronUp: \"simple-tree-chevron-up\",\n        SimpleTreeChevronDown: \"simple-tree-chevron-down\",\n        SimpleTreeEmphasize: \"simple-tree-emphasize-icon\",\n        SimpleTreeEmphasized: \"simple-tree-emphasized\",\n        // Node classes\n        SimpleTreeNodeContainer: \"simple-tree-node-container\",\n        SimpleTreeNodeContainerRoot: \"simple-tree-node-container-root\",\n        SimpleTreeNodeText: \"simple-tree-node-text\",\n        SimpleTreeNodeSelected: \"simple-tree-node-selected\",\n        SimpleTreeNodeSelectable: \"simple-tree-node-selectable\",\n        SimpleTreeNodeHovered: \"simple-tree-node-hovered\",\n        SimpleTreeNodeArrow: \"simple-tree-node-arrow\",\n        SimpleTreeNodeWrapper: \"simple-tree-node-wrapper\",\n        SimpleTreeParentNode: \"simple-tree-parent-node\",\n        SimpleTreeNodeChevronContainer: \"simple-tree-node-chevron-container\",\n        SimpleTreeNodeChevronClickable: \"simple-tree-node-chevron-clickable\",\n        SimpleTreeNodeChevronDown: \"simple-tree-node-chevron-down\",\n        SimpleTreeNodeChevronRight: \"simple-tree-node-chevron-right\",\n        SimpleTreeNodeCheckbox: \"simple-tree-node-checkbox\",\n        SimpleTreeNodeCheckboxDisabled: \"simple-tree-node-checkbox-disabled\",\n        SimpleTreeNodeCheckboxSelected: \"simple-tree-node-checkbox-selected\",\n    },\n    events: {\n        SelectionChanged: \"selectionChanged\",\n        NodeSelected: \"_nodeSelected\",\n        EscapePressed: \"_escapePressed\",\n        HoverChanged: \"_hoverChanged\",\n        FilterChanged: \"_filterChanged\",\n    },\n    nodeIdPrefix: \"simple-tree-node\",\n};\n","import { TreeNode } from \"../types/tree-node\";\nimport { DataService } from \"../data/data-service\";\nimport { EventManager } from \"../event/event-manager\";\nimport constants from \"./ui-constants\";\n\nexport class KeyEventHandler {\n    private boundKeyUp: (e: KeyboardEvent) => void;\n    private hoveredNodeValue: string | null = null;\n\n    constructor(private eventManager: EventManager, private dataService: DataService) {\n        this.boundKeyUp = this.handleKeyUp.bind(this);\n    }\n\n    public initialize(): void {\n        window.addEventListener(\"keyup\", this.boundKeyUp);\n    }\n\n    public destroy(): void {\n        window.removeEventListener(\"keyup\", this.boundKeyUp);\n    }\n\n    public setHoveredNodeValue(value: string | null): void {\n        this.hoveredNodeValue = value;\n    }\n\n    private handleKeyUp(e: KeyboardEvent): void {\n        if (e.code === \"Escape\") {\n            this.eventManager.publish(constants.events.EscapePressed);\n            return;\n        }\n\n        const flattedValues: string[] = this.dataService.getFlattedClickableNodeValues();\n        const hoveredIndex = this.hoveredNodeValue === null ? -1 : flattedValues.indexOf(this.hoveredNodeValue);\n        let targetIndex: number = hoveredIndex;\n\n        if (e.code === \"ArrowUp\") {\n            if (hoveredIndex > 0) {\n                targetIndex = hoveredIndex - 1;\n            } else {\n                targetIndex = flattedValues.length - 1;\n            }\n        } else if (e.code === \"ArrowDown\") {\n            if (hoveredIndex !== -1 && hoveredIndex < flattedValues.length - 1) {\n                targetIndex = hoveredIndex + 1;\n            } else {\n                targetIndex = 0;\n            }\n        } else if ((e.code === \"Enter\" || e.code === \"NumpadEnter\") && flattedValues[targetIndex]) {\n            const mutatedNode = this.dataService.toggleNodeSelected(flattedValues[targetIndex]);\n            this.eventManager.publish(constants.events.NodeSelected, mutatedNode);\n        }\n\n        if (targetIndex !== hoveredIndex && flattedValues[targetIndex]) {\n            this.hoveredNodeValue = flattedValues[targetIndex];\n\n            const node = this.dataService.getNode(this.hoveredNodeValue) as TreeNode;\n            this.eventManager.publish(constants.events.HoverChanged, node);\n\n            const nodeElement = document.getElementById(node.uid) as HTMLElement;\n            const container = document.getElementsByClassName(constants.classNames.SimpleTreeNodeContainer)[0] as HTMLElement;\n\n            if (container.scrollHeight > container.clientHeight) {\n                container.scrollTo({ top: nodeElement.offsetTop - container.offsetHeight });\n            }\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n    }\n}\n","import constants from \"./ui-constants\";\n\nfunction createInternalContainer(element: HTMLElement, type: string, ...cssClasses: string[]): HTMLElement {\n    const container: HTMLElement = document.createElement(type);\n    container.classList.add(...cssClasses.filter((s) => s));\n    element.appendChild(container);\n    return container;\n}\n\nexport function createContainer(element: HTMLElement, ...cssClasses: string[]): HTMLElement {\n    return createInternalContainer(element, \"div\", ...cssClasses);\n}\n\nexport function createUnorderedList(element: HTMLElement, ...cssClasses: string[]): HTMLElement {\n    return createInternalContainer(element, \"ul\", ...cssClasses);\n}\n\nexport function createListItem(element: HTMLElement, ...cssClasses: string[]): HTMLElement {\n    return createInternalContainer(element, \"li\", ...cssClasses);\n}\n\nexport function createDropdownContainer(): HTMLElement {\n    const className = constants.classNames.SimpleTreeDropdownHolder;\n    let container = document.body.querySelector(`.${className}`) as HTMLElement;\n\n    if (!container) {\n        container = createContainer(document.body, className);\n        container.style.display = \"none\";\n    }\n\n    return container;\n}\n\nexport function escape(s: string): string {\n    return s.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n}\n","import { BaseOptions } from \"../types/options\";\nimport { DataService } from \"../data/data-service\";\nimport { TreeNode } from \"../types/tree-node\";\nimport constants from \"./ui-constants\";\nimport { EventManager } from \"../event/event-manager\";\nimport { KeyEventHandler } from \"./key-event-handler\";\nimport { escape } from \"./utils\";\n\nexport class BaseTree {\n    private highlightedNode: string | null = null;\n    private hoveredNode: string | null = null;\n\n    private searchTextInput: HTMLInputElement | null = null;\n\n    private keyEventHandler: KeyEventHandler;\n\n    constructor(\n        public element: HTMLElement,\n        public config: BaseOptions,\n        public dataService: DataService,\n        private eventManager: EventManager,\n        private readOnly: boolean\n    ) {\n        this.keyEventHandler = new KeyEventHandler(this.eventManager, this.dataService);\n        this.eventManager.subscribe(constants.events.HoverChanged, (n: TreeNode | null) => this.hoverNode(n));\n    }\n\n    public destroy(): void {\n        this.deactivateKeyListener();\n    }\n\n    public activateKeyListener(): void {\n        this.keyEventHandler.initialize();\n    }\n\n    public deactivateKeyListener(): void {\n        this.keyEventHandler.destroy();\n    }\n\n    private setNodeUiState(node: TreeNode | null, current: string | null, cssClass: string): string | null {\n        this.element.querySelector(`.${constants.classNames.SimpleTreeNodeWrapper}.${cssClass}`)?.classList.remove(cssClass);\n\n        if (node !== null && current !== node.value) {\n            document\n                .getElementById(node.uid)\n                ?.querySelector(`.${constants.classNames.SimpleTreeNodeWrapper}`)\n                ?.classList.add(cssClass);\n\n            return node.value;\n        }\n\n        return null;\n    }\n\n    public highlightNode(node: TreeNode | null): void {\n        this.highlightedNode = this.setNodeUiState(node, this.highlightedNode, constants.classNames.SimpleTreeNodeSelected);\n    }\n\n    private hoverNode(node: TreeNode | null) {\n        this.hoveredNode = this.setNodeUiState(node, this.hoveredNode, constants.classNames.SimpleTreeNodeHovered);\n        this.keyEventHandler.setHoveredNodeValue(this.hoveredNode);\n    }\n\n    public renderContent(): void {\n        this.element.innerHTML = \"\";\n        this.createBasicHtml();\n        this.dataService.filter(\"\"); // reset potential filter\n        this.renderTree();\n    }\n\n    private createBasicHtml(): void {\n        if (this.config.searchBar) {\n            const wrapperDiv: HTMLDivElement = document.createElement(\"div\");\n            wrapperDiv.classList.add(constants.classNames.SimpleTreeInputContainer);\n\n            this.searchTextInput = document.createElement(\"input\");\n            this.searchTextInput.type = \"text\";\n\n            if (this.config.searchBarFocus) {\n                setTimeout(() => this.searchTextInput?.focus(), 0);\n            }\n\n            this.searchTextInput.addEventListener(\"input\", (e: Event) => {\n                this.dataService.filter((e.target as HTMLInputElement).value);\n                this.renderTree();\n                this.eventManager.publish(constants.events.FilterChanged);\n            });\n\n            wrapperDiv.appendChild(this.searchTextInput);\n            this.element.appendChild(wrapperDiv);\n        }\n\n        const nodeContainer = document.createElement(\"div\");\n        nodeContainer.classList.add(constants.classNames.SimpleTreeNodeContainer);\n        this.element.appendChild(nodeContainer);\n    }\n\n    private getNodeContainer(): Element | null {\n        const container = this.element.querySelector(`div.${constants.classNames.SimpleTreeNodeContainer}`);\n\n        if (!container) {\n            console.error(\"node container not found!\");\n        }\n\n        return container;\n    }\n\n    private renderTree(): void {\n        const nodeContainer = this.getNodeContainer();\n\n        if (nodeContainer) {\n            nodeContainer.innerHTML = \"\";\n            nodeContainer.appendChild(this.renderUnorderedList(this.dataService.displayedNodes));\n        }\n    }\n\n    private renderUnorderedList(nodes: TreeNode[]): HTMLUListElement {\n        const ulElement: HTMLUListElement = document.createElement(\"ul\");\n        ulElement.classList.add(constants.classNames.SimpleTreeNodeContainerRoot);\n\n        let highlightRegex: RegExp | null = null;\n\n        if (this.searchTextInput?.value && this.config.highlightSearchResults) {\n            highlightRegex = new RegExp(`(${this.searchTextInput?.value})`, \"ig\");\n        }\n\n        nodes.forEach((node: TreeNode) => {\n            const hasChildren = node.children?.length > 0;\n            const liElement: HTMLLIElement = document.createElement(\"li\");\n            liElement.id = node.uid;\n\n            const lineWrapperDiv = document.createElement(\"div\");\n            lineWrapperDiv.classList.add(constants.classNames.SimpleTreeNodeWrapper);\n            lineWrapperDiv.addEventListener(\"mouseover\", () => this.hoverNode(node));\n            lineWrapperDiv.addEventListener(\"mouseout\", () => this.hoverNode(null));\n\n            if (hasChildren) {\n                lineWrapperDiv.classList.add(constants.classNames.SimpleTreeParentNode);\n            }\n\n            const textDivElement = document.createElement(\"div\");\n            textDivElement.classList.add(constants.classNames.SimpleTreeNodeText);\n\n            this.addChevronDiv(lineWrapperDiv, node, hasChildren);\n\n            if (this.config.checkboxes.active) {\n                const checkboxElement = document.createElement(\"div\");\n                checkboxElement.classList.add(constants.classNames.SimpleTreeNodeCheckbox);\n\n                if (this.readOnly || (!this.config.checkboxes.recursive && !node.selectable)) {\n                    checkboxElement.classList.add(constants.classNames.SimpleTreeNodeCheckboxDisabled);\n                } else {\n                    checkboxElement.addEventListener(\"click\", () => this.toggleCheckboxSelected(node));\n                }\n\n                if (node.selected) {\n                    checkboxElement.classList.add(constants.classNames.SimpleTreeNodeCheckboxSelected);\n                }\n\n                lineWrapperDiv.appendChild(checkboxElement);\n            } else if (node.selected) {\n                lineWrapperDiv.classList.add(constants.classNames.SimpleTreeNodeSelected);\n            }\n\n            textDivElement.innerHTML = this.formatNodeLabel(node.label, highlightRegex);\n\n            if (!this.config.checkboxes.active && node.selectable && !this.readOnly) {\n                lineWrapperDiv.addEventListener(\"click\", () => this.toggleNodeSelected(node));\n                lineWrapperDiv.classList.add(constants.classNames.SimpleTreeNodeSelectable);\n            }\n\n            lineWrapperDiv.appendChild(textDivElement);\n            liElement.appendChild(lineWrapperDiv);\n\n            ulElement.appendChild(liElement);\n\n            if (!node.collapsed && hasChildren) {\n                liElement.appendChild(this.renderUnorderedList(node.children));\n            }\n        });\n\n        if (nodes.length === 0) {\n            const liElement: HTMLLIElement = document.createElement(\"li\");\n            const lineWrapperDiv = document.createElement(\"div\");\n            lineWrapperDiv.classList.add(constants.classNames.SimpleTreeNodeWrapper);\n\n            const textDivElement = document.createElement(\"div\");\n            textDivElement.classList.add(constants.classNames.SimpleTreeNodeText);\n            textDivElement.textContent = this.config.noNodesMessage;\n\n            lineWrapperDiv.appendChild(textDivElement);\n            liElement.appendChild(lineWrapperDiv);\n            ulElement.appendChild(liElement);\n        }\n\n        return ulElement;\n    }\n\n    private toggleNodeSelected(node: TreeNode): void {\n        const mutatedNode = this.dataService.toggleNodeSelected(node.value);\n        this.eventManager.publish(constants.events.NodeSelected, mutatedNode);\n    }\n\n    private toggleCheckboxSelected(node: TreeNode): void {\n        const mutatedNode = this.dataService.toggleCheckboxSelected(node.value);\n        this.eventManager.publish(constants.events.NodeSelected, mutatedNode);\n    }\n\n    private addChevronDiv(divElement: HTMLDivElement, node: TreeNode, hasChildren: boolean): void {\n        const chevronDivContainer = document.createElement(\"div\");\n        chevronDivContainer.classList.add(constants.classNames.SimpleTreeNodeChevronContainer);\n\n        if (hasChildren) {\n            const chevronDiv = document.createElement(\"div\");\n            if (node.collapsed) {\n                chevronDiv.classList.add(constants.classNames.SimpleTreeNodeChevronRight);\n            } else {\n                chevronDiv.classList.add(constants.classNames.SimpleTreeNodeChevronDown);\n            }\n\n            chevronDivContainer.appendChild(chevronDiv);\n\n            chevronDivContainer.addEventListener(\"click\", (e: MouseEvent) => {\n                e.stopPropagation();\n                const flag = !node.collapsed;\n                node.collapsed = flag;\n                this.collapseNode(node, flag);\n                this.renderTree();\n            });\n\n            chevronDivContainer.classList.add(constants.classNames.SimpleTreeNodeChevronClickable);\n        }\n\n        divElement.appendChild(chevronDivContainer);\n    }\n\n    private collapseNode(node: TreeNode, flag: boolean): void {\n        node.children.forEach((c) => {\n            c.hidden = flag;\n            c.children.forEach((c) => this.collapseNode(c, flag));\n        });\n    }\n\n    public setReadOnly(readOnly: boolean): void {\n        this.readOnly = readOnly;\n\n        if (this.searchTextInput) {\n            this.searchTextInput.disabled = readOnly;\n        }\n    }\n\n    private formatNodeLabel(text: string, highlightRegex: RegExp | null): string {\n        if (highlightRegex) {\n            return escape(text).replace(highlightRegex, (match: string): string => `<em>${match}</em>`);\n        }\n\n        return escape(text);\n    }\n}\n","import { Subscription } from \"../types/subscription\";\n\nexport class EventManager {\n    public eventLookup: { [event: string]: ((d: unknown, e: string) => void)[] } = {};\n\n    public publish<T>(event: string, data?: T): void {\n        let subscribers;\n        let i;\n\n        if (!event) {\n            throw new Error(\"Event was invalid.\");\n        }\n\n        subscribers = this.eventLookup[event];\n        if (subscribers) {\n            subscribers = subscribers.slice();\n            i = subscribers.length;\n\n            while (i--) {\n                try {\n                    subscribers[i](data, event);\n                } catch (e) {\n                    console.error(e);\n                }\n            }\n        }\n    }\n\n    public subscribe<T>(event: string, callback: (d: T, e: string) => void): Subscription {\n        const handler = callback;\n        let subscribers: ((d: T, e: string) => void)[] = [];\n\n        if (!event) {\n            throw new Error(\"Event channel/type was invalid.\");\n        }\n\n        subscribers = this.eventLookup[event] || (this.eventLookup[event] = []);\n        subscribers.push(handler);\n\n        return {\n            dispose() {\n                const idx = subscribers.indexOf(handler);\n                if (idx !== -1) {\n                    subscribers.splice(idx, 1);\n                }\n            },\n        };\n    }\n\n    public subscribeOnce<T>(event: string, callback: (d: T, e: string) => void): Subscription {\n        const sub = this.subscribe(event, (a: T, b: string) => {\n            sub.dispose();\n            return callback(a, b);\n        });\n\n        return sub;\n    }\n}\n","/**\n * The data representation of each node-object in the tree.\n */\nexport interface TreeNode {\n    /**\n     * The displayed text of this tree-node.\n     */\n    label: string;\n\n    /**\n     * The data-value of this tree-node. It has to be unique.\n     */\n    value: string;\n\n    /**\n     * Indicates if this node is currently selected and included in the component-value ({@link Instance.getSelected()}).\n     */\n    selected: boolean;\n\n    /**\n     * Indicates if this node is selectable. Mouse-clicks on the node are avoided if `false`.\n     * Nodes that are not selectable are also ignored when setting via API.\n     * In Recursive Checkbox Mode this flag has no effect since all nodes are selectable there.\n     */\n    selectable: boolean;\n\n    /**\n     * Recursive array of child `TreeNode` objects.\n     */\n    children: TreeNode[];\n\n    /**\n     * Indicates if this node (in case it has child-nodes) is currently collapsed.\n     */\n    collapsed: boolean;\n\n    /**\n     * Indicates if this node is visible in the tree.\n     */\n    hidden: boolean;\n\n    /**\n     * The unique id-value used internally.\n     */\n    uid: string;\n\n    /**\n     * Any additional property, which is available (the component-logic will respect them).\n     */\n    [key: string]: any;\n}\n\n/**\n * @ignore\n */\nexport const defaults: TreeNode = {\n    label: \"\",\n    value: \"\",\n    selected: false,\n    selectable: true,\n    children: [],\n    collapsed: false,\n    hidden: false,\n    uid: \"\",\n};\n","import { TreeNode } from \"../types/tree-node\";\n\nexport function validateTreeNodeArray(treeNodes: TreeNode[]): ValidationResult {\n    if (treeNodes === null || treeNodes === undefined) {\n        return {\n            success: false,\n            errors: [createValidationError(null, \"array is not defined\")],\n        };\n    }\n\n    const errors: ValidationError[] = [];\n    getTreeNodeValues(treeNodes, [], errors);\n\n    return {\n        success: errors.length === 0,\n        errors: errors,\n    };\n}\n\nfunction getTreeNodeValues(treeNodes: TreeNode[], values: string[], errors: ValidationError[]): void {\n    treeNodes.forEach((node: TreeNode) => {\n        if (!isTreeNodeValid(node)) {\n            errors.push(createValidationError(node, \"the given node list contains an invalid value\"));\n        }\n\n        if (values.includes(node.value)) {\n            errors.push(createValidationError(node, \"node value is not unique\"));\n        } else {\n            values.push(node.value);\n        }\n\n        if (node.children && node.children.length > 0) {\n            getTreeNodeValues(node.children, values, errors);\n        }\n    });\n}\n\nexport function isTreeNodeValid(treeNode: TreeNode): boolean {\n    return !!treeNode && !!treeNode.value;\n}\n\nexport function isDuplicateNodeValue(treeNodes: TreeNode[], value: string): boolean {\n    let duplicate = false;\n\n    for (const node of treeNodes) {\n        if (node.value === value) {\n            duplicate = true;\n            break;\n        }\n\n        if (node.children && node.children.length > 0) {\n            const childrenContainDuplicate: boolean = isDuplicateNodeValue(node.children, value);\n            if (childrenContainDuplicate) {\n                duplicate = true;\n                break;\n            }\n        }\n    }\n\n    return duplicate;\n}\n\nfunction createValidationError(node: TreeNode | null, message: string): ValidationError {\n    return {\n        node: node,\n        message: message,\n    };\n}\n\nexport interface ValidationResult {\n    success: boolean;\n    errors: ValidationError[];\n}\n\nexport interface ValidationError {\n    node: TreeNode | null;\n    message: string;\n}\n","import { TreeNode, defaults } from \"../types/tree-node\";\nimport { isDuplicateNodeValue, isTreeNodeValid } from \"../validation/validation\";\nimport constants from \"../ui/ui-constants\";\n\nexport class DataService {\n    private allNodes: TreeNode[] = [];\n    private treeInstanceId: number;\n\n    constructor(\n        public displayedNodes: TreeNode[] = [],\n        private checkboxesActive: boolean = false,\n        private checkboxesRecursive: boolean = false\n    ) {\n        this.treeInstanceId = Math.floor(1000 + Math.random() * 9000);\n        this.displayedNodes = this.normalizeNodes(displayedNodes);\n        this.allNodes = this.displayedNodes;\n    }\n\n    private normalizeNodes(nodes: TreeNode[]): TreeNode[] {\n        return nodes.map((node: TreeNode) => {\n            const n = this.copyNode(node);\n            n.uid = this.generateUid(node.value);\n            this.mutateNode(n);\n            n.children = this.normalizeNodes(n.children || []);\n            return n;\n        });\n    }\n\n    private mutateNode(node: TreeNode): void {\n        if (!node.selectable && node.selected) {\n            node.selected = false;\n        }\n    }\n\n    private copyNode(node: TreeNode): TreeNode {\n        return {\n            ...defaults,\n            ...node,\n        };\n    }\n\n    public clear(): void {\n        this.allNodes = [];\n        this.displayedNodes = [];\n    }\n\n    // Currently only used for testing. Maybe see if tests can be refactored with rendering/event logic\n    public getAllNodes(): TreeNode[] {\n        return this.allNodes;\n    }\n\n    public getNode(value: string): TreeNode | null {\n        const nodeToReturn = this.getNodeInternal(this.allNodes, value);\n\n        if (nodeToReturn) {\n            return this.copyNode(nodeToReturn);\n        }\n\n        return null;\n    }\n\n    private getNodeInternal(nodes: TreeNode[], value: string): TreeNode | null {\n        for (const node of nodes) {\n            if (node.value === value) {\n                return node;\n            }\n\n            if (node.children && node.children.length > 0) {\n                const result: TreeNode | null = this.getNodeInternal(node.children, value);\n\n                if (result) {\n                    return result;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public addNode(node: TreeNode, parent: TreeNode | string | null = null): void {\n        if (!isTreeNodeValid(node) || isDuplicateNodeValue(this.allNodes, node.value)) {\n            throw new Error(\"node value is invalid or node with value already exists!\");\n        }\n\n        this.mutateNode(node);\n\n        if (parent && this.isTreeNode(parent)) {\n            parent.children.push(node);\n        } else if (typeof parent === \"string\") {\n            const parentNode: TreeNode | null = this.getNodeInternal(this.allNodes, parent);\n\n            if (this.isTreeNode(parentNode)) {\n                parentNode.children.push(node);\n            }\n        } else {\n            this.allNodes.push(node);\n        }\n    }\n\n    public moveNode(node: TreeNode | string, direction: \"up\" | \"down\"): void {\n        if (!node) {\n            return;\n        }\n\n        const nodeValue = this.isTreeNode(node) ? node.value : node;\n        const nodeList: TreeNode[] | undefined = this.allNodes.some((n) => n.value === nodeValue)\n            ? this.allNodes\n            : this.getParentForNode(this.allNodes, nodeValue)?.children || this.allNodes;\n        const nodeIndex: number = nodeList.findIndex((n: TreeNode) => n.value === nodeValue);\n\n        if (direction === \"up\" && nodeIndex > 0) {\n            const tempNode: TreeNode = nodeList[nodeIndex];\n            nodeList[nodeIndex] = nodeList[nodeIndex - 1];\n            nodeList[nodeIndex - 1] = tempNode;\n        } else if (direction === \"down\" && nodeIndex < nodeList.length - 1) {\n            const tempNode: TreeNode = nodeList[nodeIndex];\n            nodeList[nodeIndex] = nodeList[nodeIndex + 1];\n            nodeList[nodeIndex + 1] = tempNode;\n        }\n    }\n\n    private isTreeNode(value: TreeNode | string | null): value is TreeNode {\n        return (value as TreeNode).children !== undefined;\n    }\n\n    public deleteNode(value: string): void {\n        const node: TreeNode | undefined = this.allNodes.find((node: TreeNode) => node.value === value);\n\n        if (node) {\n            this.allNodes.splice(this.allNodes.indexOf(node), 1);\n        } else {\n            const parent: TreeNode | null = this.getParentForNode(this.allNodes, value);\n\n            if (parent) {\n                const childNode: TreeNode = parent.children.find((node: TreeNode) => node.value === value) as TreeNode;\n                parent.children.splice(parent.children.indexOf(childNode), 1);\n            }\n        }\n    }\n\n    public updateNodeLabel(value: string, newLabel: string): void {\n        const node = this.getNodeInternal(this.allNodes, value);\n        if (node) {\n            node.label = newLabel;\n        }\n    }\n\n    private getParentForNode(nodes: TreeNode[], value: string): TreeNode | null {\n        for (const node of nodes) {\n            if (node.children && node.children.some((n: TreeNode) => n.value === value)) {\n                return node;\n            }\n\n            let parent: TreeNode | null = null;\n            if (node.children) {\n                parent = this.getParentForNode(node.children, value);\n            }\n\n            if (parent) {\n                return parent;\n            }\n        }\n\n        return null;\n    }\n\n    public getFlattedClickableNodeValues(): string[] {\n        return this.flatten(this.displayedNodes)\n            .filter((node: TreeNode) => node.selectable && !node.hidden)\n            .map((n: TreeNode) => n.value);\n    }\n\n    private flatten(nodes: TreeNode[]): TreeNode[] {\n        return nodes.reduce<TreeNode[]>((acc, e) => {\n            if (e.children.length > 0) {\n                acc.push(e);\n                return acc.concat(this.flatten(e.children));\n            } else {\n                return acc.concat(e);\n            }\n        }, []);\n    }\n\n    public filter(searchTerm: string): void {\n        if (searchTerm) {\n            this.displayedNodes = this.filterNodes(this.allNodes, searchTerm.toLowerCase());\n        } else {\n            this.displayedNodes = this.normalizeNodes(this.allNodes);\n        }\n    }\n\n    private filterNodes(nodes: TreeNode[], searchTerm: string): TreeNode[] {\n        const filtered: TreeNode[] = [];\n\n        nodes.forEach((n) => {\n            const childNodes: TreeNode[] = this.filterNodes(n.children, searchTerm);\n\n            if (n.label.toLowerCase().includes(searchTerm) || childNodes.length > 0) {\n                const node = this.copyNode(n);\n                node.children = childNodes;\n\n                filtered.push(node);\n            }\n        });\n\n        return filtered;\n    }\n\n    public setSelected(...nodes: TreeNode[]): void {\n        const values = nodes.map((n) => n.value);\n        this.setSelectedNodes(this.allNodes, values);\n\n        if (this.checkboxesActive && this.checkboxesRecursive) {\n            this.cleanRecursiveSelection(this.allNodes);\n        }\n    }\n\n    private updateCheckboxState(node: TreeNode): void {\n        if (!this.checkboxesActive) {\n            return;\n        }\n\n        const checkboxDiv: HTMLDivElement | null | undefined = document\n            .getElementById(node.uid)\n            ?.querySelector(`.${constants.classNames.SimpleTreeNodeCheckbox}`);\n\n        if (!checkboxDiv) {\n            console.error(\"checkbox div not found for node!\", node);\n            return;\n        }\n\n        if (checkboxDiv) {\n            if (node.selected && !checkboxDiv.classList.contains(constants.classNames.SimpleTreeNodeCheckboxSelected)) {\n                checkboxDiv.classList.add(constants.classNames.SimpleTreeNodeCheckboxSelected);\n            } else if (!node.selected && checkboxDiv.classList.contains(constants.classNames.SimpleTreeNodeCheckboxSelected)) {\n                checkboxDiv.classList.remove(constants.classNames.SimpleTreeNodeCheckboxSelected);\n            }\n        }\n    }\n\n    private setSelectedNodes(nodes: TreeNode[], values: string[]): void {\n        nodes.forEach((n: TreeNode) => {\n            if (this.checkboxesRecursive || n.selectable) {\n                n.selected = values.includes(n.value);\n                this.updateCheckboxState(n);\n            }\n\n            if (n.children && n.children.length > 0) {\n                this.setSelectedNodes(n.children, values);\n            }\n        });\n    }\n\n    private cleanRecursiveSelection(nodes: TreeNode[]): boolean {\n        let allNodesSelected = true;\n        nodes.forEach((n: TreeNode) => {\n            if (n.children && n.children.length > 0) {\n                if (n.selected) {\n                    this.checkRecursiveChilds(n.children);\n                } else {\n                    n.selected = this.cleanRecursiveSelection(n.children);\n                    this.updateCheckboxState(n);\n                }\n            }\n\n            allNodesSelected = allNodesSelected && n.selected;\n        });\n\n        return allNodesSelected;\n    }\n\n    private checkRecursiveChilds(nodes: TreeNode[]): void {\n        nodes.forEach((n: TreeNode) => {\n            n.selected = true;\n            this.updateCheckboxState(n);\n\n            if (n.children && n.children.length > 0) {\n                this.checkRecursiveChilds(n.children);\n            }\n        });\n    }\n\n    public getSelected(): TreeNode[] {\n        return this.getSelectedInternal(this.allNodes).map(this.copyNode);\n    }\n\n    private getSelectedInternal(nodes: TreeNode[], filtered: TreeNode[] = []): TreeNode[] {\n        nodes.forEach((n) => {\n            if (n.selected) {\n                filtered.push(n);\n            }\n\n            if (n.children && n.children.length > 0) {\n                filtered = this.getSelectedInternal(n.children, filtered);\n            }\n        });\n\n        return filtered;\n    }\n\n    public toggleNodeSelected(nodeValue: string): TreeNode | null {\n        const node = this.getNodeInternal(this.allNodes, nodeValue);\n\n        if (!node) {\n            console.error(`node '${nodeValue}' to toggle not found!`);\n            return null;\n        }\n\n        node.selected = !node.selected;\n        return this.copyNode(node);\n    }\n\n    public toggleCheckboxSelected(nodeValue: string): TreeNode | null {\n        let node = this.getNodeInternal(this.allNodes, nodeValue);\n\n        if (!node) {\n            console.error(`checkbox node '${nodeValue}' to toggle not found!`);\n            return null;\n        }\n\n        const selected = !node.selected;\n\n        node = this.toggleCheckboxNode(node, selected);\n\n        if (this.checkboxesRecursive) {\n            this.toggleCheckboxParent(node);\n        }\n\n        return this.copyNode(node);\n    }\n\n    private toggleCheckboxNode(node: TreeNode, selected: boolean, toggleChildren = true): TreeNode {\n        const nodeCheckboxDiv: HTMLDivElement | null | undefined = document\n            .getElementById(node.uid)\n            ?.querySelector(`.${constants.classNames.SimpleTreeNodeCheckbox}`);\n\n        if (!nodeCheckboxDiv) {\n            console.error(\"checkbox div not found!\");\n            return node;\n        }\n\n        node.selected = selected;\n\n        if (node.selected && !nodeCheckboxDiv.classList.contains(constants.classNames.SimpleTreeNodeCheckboxSelected)) {\n            nodeCheckboxDiv.classList.add(constants.classNames.SimpleTreeNodeCheckboxSelected);\n        } else if (!node.selected && nodeCheckboxDiv.classList.contains(constants.classNames.SimpleTreeNodeCheckboxSelected)) {\n            nodeCheckboxDiv.classList.remove(constants.classNames.SimpleTreeNodeCheckboxSelected);\n        }\n\n        if (this.checkboxesRecursive && toggleChildren && node.children?.length > 0) {\n            node.children.forEach((child: TreeNode) => this.toggleCheckboxNode(child, selected));\n        }\n\n        return node;\n    }\n\n    private toggleCheckboxParent(node: TreeNode): void {\n        const parentNode = this.getParentForNode(this.allNodes, node.value);\n\n        if (parentNode && parentNode.children?.length > 0) {\n            const selected = parentNode.children.every((node: TreeNode) => node.selected === true);\n            this.toggleCheckboxNode(parentNode, selected, false);\n            this.toggleCheckboxParent(parentNode);\n        }\n    }\n\n    private generateUid(value: string): string {\n        let hash = 0;\n        for (let i = 0; i < value.length; i++) {\n            const chr = value.charCodeAt(i);\n            hash = (hash << 5) - hash + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n\n        return `${this.treeInstanceId}-${Math.abs(hash)}`;\n    }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { TreeInstance, TreeModeNameMap } from \"../types/instance\";\nimport { EventManager } from \"../event/event-manager\";\nimport { Subscription } from \"../types/subscription\";\nimport { DataService } from \"../data/data-service\";\nimport constants from \"./ui-constants\";\nimport { BaseTree } from \"./base-tree\";\nimport { BaseOptions } from \"../types/options\";\nimport { TreeNode } from \"../types/tree-node\";\n\nexport abstract class CommonTreeLogic<K extends keyof TreeModeNameMap> implements TreeInstance<K> {\n    protected eventManager: EventManager;\n    protected dataService: DataService;\n    protected tree!: BaseTree;\n\n    protected rootContainer!: HTMLElement;\n\n    protected selected!: TreeModeNameMap[K];\n    protected readOnly = false;\n\n    constructor(protected element: Element, public options: BaseOptions) {\n        this.eventManager = new EventManager();\n        this.dataService = new DataService(options.nodes, options.checkboxes.active, options.checkboxes.recursive);\n    }\n\n    /////////////////////////////// PUBLIC API ///////////////////////////////\n\n    public destroy(): void {\n        this.tree.destroy();\n        Array.from(this.element.children).forEach((e: Element) => this.element.removeChild(e));\n\n        this.dataService.clear();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public showEmphasizeIcon(_cssClass: string): void {\n        throw new Error(\"Feature not supported in this mode!\");\n    }\n\n    public hideEmphasizeIcon(): void {\n        throw new Error(\"Feature not supported in this mode!\");\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public moveNode(_value: TreeNode | string, _direction: \"up\" | \"down\"): void {\n        throw new Error(\"Feature not supported in this mode!\");\n    }\n\n    public setSelected(value: TreeModeNameMap[K]): void {\n        this.selected = value;\n    }\n\n    public getSelected(): TreeModeNameMap[K] {\n        return this.selected;\n    }\n\n    public getNode(value: string): TreeNode | null {\n        return this.dataService.getNode(value);\n    }\n\n    public addNode(node: TreeNode, parent: TreeNode | string | null = null): void {\n        this.dataService.addNode(node, parent);\n    }\n\n    public deleteNode(node: TreeNode): void {\n        this.dataService.deleteNode(node.value);\n    }\n\n    public updateNodeLabel(node: TreeNode, newLabel: string): void {\n        this.dataService.updateNodeLabel(node.value, newLabel);\n    }\n\n    public setReadOnly(readOnly: boolean): void {\n        if (this.readOnly !== readOnly) {\n            this.readOnly = readOnly;\n            this.tree.setReadOnly(readOnly);\n            this.rootContainer.classList.toggle(constants.classNames.SimpleTreeReadOnly, readOnly);\n            this.tree.renderContent();\n        }\n    }\n\n    public subscribe(event: string, handler: (d: any, e: string) => void): Subscription {\n        return this.eventManager.subscribe(event, handler);\n    }\n\n    public subscribeOnce(event: string, handler: (d: any, e: string) => void): Subscription {\n        return this.eventManager.subscribeOnce(event, handler);\n    }\n\n    //////////////////////////////////////////////////////////////////////////\n}\n","import { Rect } from \"../types/rects\";\n\nexport function calculate(\n    elementRect: Rect,\n    availableHeight: number,\n    overlayHeight: number,\n    borderWith = 0,\n    maxOverlayHeight = 300\n): Rect {\n    let top = elementRect.top + elementRect.height + borderWith;\n    let height = overlayHeight > maxOverlayHeight ? maxOverlayHeight : overlayHeight;\n    const tolerance = 10;\n    const topRelative = top - window.scrollY;\n\n    if (topRelative + height + tolerance > availableHeight) {\n        // show above of the corresponding element\n        top = elementRect.top - height - borderWith;\n    }\n\n    if (top < 0) {\n        // show below of the corresponding element and reduce height\n        top = elementRect.top + elementRect.height + borderWith;\n        height = availableHeight - top - tolerance;\n    }\n\n    return {\n        top,\n        left: elementRect.left - borderWith,\n        width: elementRect.width - borderWith,\n        height,\n    };\n}\n\nexport function calculateOverlay(overlay: HTMLElement, element: HTMLElement, overlayHeight: number, maxHeight = 300): void {\n    const { top, left } = element.getBoundingClientRect();\n    const scrollX = window.scrollX;\n    const scrollY = window.scrollY;\n\n    const rect = calculate(\n        {\n            top: top + scrollY,\n            height: element.offsetHeight,\n            left: left + scrollX,\n            width: element.offsetWidth,\n        },\n        window.innerHeight,\n        overlayHeight,\n        parseInt(getComputedStyle(overlay).borderLeftWidth.replace(\"px\", \"\"), 10),\n        maxHeight\n    );\n\n    overlay.style.top = `${rect.top}px`;\n    overlay.style.left = `${rect.left}px`;\n    overlay.style.width = `${rect.width}px`;\n    overlay.style.height = `${rect.height}px`;\n}\n\nexport function calculateOverlayPlacement(overlay: HTMLElement, element: HTMLElement, maxHeight = 300): void {\n    return calculateOverlay(overlay, element, overlay.clientHeight, maxHeight);\n}\n","import { CommonTreeLogic } from \"./common-tree-logic\";\nimport { TreeModeNameMap } from \"../types/instance\";\nimport { BaseOptions } from \"../types/options\";\nimport { calculateOverlay } from \"./overlay-placement\";\nimport constants from \"./ui-constants\";\nimport { Subscription } from \"types/subscription\";\n\nexport abstract class CommonDropdownTreeLogic<K extends keyof TreeModeNameMap> extends CommonTreeLogic<K> {\n    protected dropdownOpen = false;\n    private filterChangedSubscription!: Subscription | null;\n\n    protected dropdownHolder!: HTMLElement;\n    protected selectContainer!: HTMLElement;\n    protected arrowElement!: HTMLElement;\n    protected clearElement!: HTMLElement | null;\n\n    private preventScrollListener!: null | ((e: WheelEvent) => void);\n    private boundClick: (e: MouseEvent) => void;\n\n    constructor(element: Element, options: BaseOptions) {\n        super(element, options);\n        this.eventManager.subscribe(constants.events.EscapePressed, () => this.closeDropdown());\n        this.boundClick = this.onClick.bind(this);\n    }\n\n    protected toggleDropdown(): void {\n        if (this.dropdownOpen) {\n            this.closeDropdown();\n        } else {\n            this.openDropdown();\n        }\n    }\n\n    private onClick(e: MouseEvent): void {\n        const clickedElement = e.target as HTMLElement;\n\n        if (!this.dropdownHolder.contains(clickedElement) && !this.selectContainer.contains(clickedElement)) {\n            // clicked outside\n            this.closeDropdown();\n        }\n    }\n\n    protected openDropdown(): void {\n        if (this.readOnly) {\n            return;\n        }\n\n        this.tree.renderContent();\n        this.tree.activateKeyListener();\n        this.filterChangedSubscription = this.eventManager.subscribe(constants.events.FilterChanged, () =>\n            this.calculateDropdownPosition()\n        );\n\n        if (this.options.css.dropdownHolder) {\n            this.dropdownHolder.classList.add(this.options.css.dropdownHolder);\n        }\n\n        // Avoid interference of main page\n        this.dropdownHolder.style.top = \"-9999px\";\n        this.dropdownHolder.style.left = \"-9999px\";\n        this.dropdownHolder.style.display = \"inherit\";\n\n        this.calculateDropdownPosition();\n        this.arrowElement.classList.remove(constants.classNames.SimpleTreeChevronDown);\n        this.arrowElement.classList.add(constants.classNames.SimpleTreeChevronUp);\n        this.dropdownOpen = true;\n        window.addEventListener(\"mouseup\", this.boundClick);\n\n        if (this.options.scrollContainer) {\n            this.preventScrollListener = (e) => {\n                const root = this.dropdownHolder.querySelector(\".simple-tree-node-container-root\");\n                if (!root?.contains(e.target as Element)) {\n                    e.preventDefault();\n                }\n            };\n            this.options.scrollContainer.addEventListener(\"wheel\", this.preventScrollListener, { passive: false });\n        }\n    }\n\n    protected closeDropdown(): void {\n        if (!this.dropdownOpen) {\n            return;\n        }\n\n        if (this.filterChangedSubscription) {\n            this.filterChangedSubscription.dispose();\n            this.filterChangedSubscription = null;\n        }\n\n        if (this.options.css.dropdownHolder) {\n            this.dropdownHolder.classList.remove(this.options.css.dropdownHolder);\n        }\n\n        this.dropdownHolder.style.display = \"none\";\n        this.dropdownHolder.style.top = ``;\n        this.dropdownHolder.style.left = ``;\n        this.dropdownHolder.style.width = ``;\n        this.dropdownHolder.style.height = ``;\n        this.arrowElement.classList.remove(constants.classNames.SimpleTreeChevronUp);\n        this.arrowElement.classList.add(constants.classNames.SimpleTreeChevronDown);\n        this.dropdownOpen = false;\n        window.removeEventListener(\"mouseup\", this.boundClick);\n        this.tree.deactivateKeyListener();\n\n        if (this.options.scrollContainer && this.preventScrollListener) {\n            this.options.scrollContainer.removeEventListener(\"wheel\", this.preventScrollListener);\n            this.preventScrollListener = null;\n        }\n    }\n\n    private calculateDropdownPosition(): void {\n        let height = 0;\n\n        if (this.options.searchBar) {\n            height += this.dropdownHolder.children[0].clientHeight;\n            height += this.dropdownHolder.children[1].scrollHeight;\n        } else {\n            height += this.dropdownHolder.children[0].scrollHeight;\n        }\n\n        calculateOverlay(this.dropdownHolder, this.selectContainer.parentElement as HTMLElement, height);\n    }\n}\n","import { BaseOptions } from \"../types/options\";\nimport { BaseTree } from \"./base-tree\";\nimport { createContainer, createDropdownContainer } from \"./utils\";\nimport { TreeNode } from \"../types/tree-node\";\nimport constants from \"./ui-constants\";\nimport { CommonDropdownTreeLogic } from \"./common-dropdown-tree-logic\";\n\nexport class SingleSelectDropdown extends CommonDropdownTreeLogic<\"singleSelectDropdown\"> {\n    private emphasisCssClass!: string | null;\n\n    private selectedLabel!: HTMLElement;\n    private emphasizeElement!: HTMLElement | null;\n\n    constructor(element: HTMLElement, options: BaseOptions) {\n        super(element, options);\n        this.rootContainer = createContainer(element, constants.classNames.SimpleTree);\n        this.selected = this.dataService.getSelected()[0] || null;\n\n        this.dropdownHolder = createDropdownContainer();\n        this.tree = new BaseTree(this.dropdownHolder, options, this.dataService, this.eventManager, this.readOnly);\n        this.subscribe(constants.events.NodeSelected, (n: TreeNode) => this.nodeSelected(n));\n        this.renderSelectField(this.rootContainer);\n    }\n\n    /////////////////////////////// PUBLIC API ///////////////////////////////\n\n    public setSelected(value: TreeNode | null): void {\n        if (value) {\n            this.dataService.setSelected(value);\n        } else {\n            this.dataService.setSelected();\n        }\n\n        super.setSelected(this.dataService.getSelected()[0] || null);\n        this.updateUiOnSelection();\n        this.tree.highlightNode(value);\n    }\n\n    public setReadOnly(readOnly: boolean): void {\n        super.setReadOnly(readOnly);\n\n        if (readOnly && this.dropdownOpen) {\n            this.closeDropdown();\n        }\n    }\n\n    public showEmphasizeIcon(cssClass: string): void {\n        this.emphasisCssClass = cssClass;\n\n        if (this.selected && this.emphasisCssClass && !this.emphasizeElement) {\n            this.selectContainer.classList.add(constants.classNames.SimpleTreeEmphasized);\n            this.emphasizeElement = document.createElement(\"i\");\n            this.emphasizeElement.classList.add(constants.classNames.SimpleTreeEmphasize, cssClass);\n            this.selectContainer.appendChild(this.emphasizeElement);\n        }\n    }\n\n    public hideEmphasizeIcon(): void {\n        this.emphasisCssClass = null;\n\n        if (this.emphasizeElement) {\n            this.selectContainer.classList.remove(constants.classNames.SimpleTreeEmphasized);\n            this.selectContainer.removeChild(this.emphasizeElement);\n            this.emphasizeElement = null;\n        }\n    }\n\n    //////////////////////////////////////////////////////////////////////////\n\n    private nodeSelected(node: TreeNode): void {\n        this.dataService.setSelected(node);\n        this.selected = this.dataService.getSelected()[0] || null;\n        this.tree.highlightNode(node);\n        this.updateUiOnSelection();\n        this.closeDropdown();\n        this.eventManager.publish(constants.events.SelectionChanged, this.selected);\n    }\n\n    private renderSelectField(container: HTMLElement): void {\n        this.selectContainer = createContainer(container, constants.classNames.SimpleTreeSingleSelectBox);\n        this.selectContainer.onclick = () => !this.readOnly && this.toggleDropdown();\n\n        this.selectedLabel = document.createElement(\"span\");\n        this.selectedLabel.classList.add(constants.classNames.SimpleTreeSelectedLabel);\n        this.selectContainer.appendChild(this.selectedLabel);\n        this.updateUiOnSelection();\n\n        this.arrowElement = document.createElement(\"i\");\n        this.arrowElement.classList.add(constants.classNames.SimpleTreeChevronDown);\n        this.selectContainer.appendChild(this.arrowElement);\n    }\n\n    private updateUiOnSelection(): void {\n        this.selectedLabel.innerHTML = this.selected ? this.options.templateSelectedText(this.selected) : this.options.watermark;\n        this.selectedLabel.classList.toggle(constants.classNames.SimpleTreeSelectedLabelWatermark, !this.selected);\n\n        if (this.emphasisCssClass && this.selected) {\n            this.showEmphasizeIcon(this.emphasisCssClass);\n        } else if (!this.selected) {\n            const css = this.emphasisCssClass;\n            this.hideEmphasizeIcon();\n            this.emphasisCssClass = css; // restore the class here\n        }\n\n        if (this.options.clearButton && this.selected && !this.clearElement) {\n            this.clearElement = document.createElement(\"i\");\n            this.clearElement.classList.add(constants.classNames.SimpleTreeCross);\n            this.clearElement.onclick = (e: MouseEvent) => {\n                if (!this.readOnly) {\n                    this.setSelected(null);\n                    this.eventManager.publish(constants.events.SelectionChanged, null);\n                }\n\n                e.stopPropagation();\n            };\n\n            this.selectContainer.appendChild(this.clearElement);\n            this.selectContainer.classList.add(constants.classNames.SimpleTreeClearable);\n        } else if (!this.selected && this.clearElement) {\n            this.clearElement.remove();\n            this.clearElement = null;\n        }\n    }\n}\n","import { BaseOptions } from \"../types/options\";\nimport { BaseTree } from \"./base-tree\";\nimport { TreeNode } from \"../types/tree-node\";\nimport { createContainer, createDropdownContainer, createUnorderedList, createListItem } from \"./utils\";\nimport constants from \"./ui-constants\";\nimport { CommonDropdownTreeLogic } from \"./common-dropdown-tree-logic\";\n\nexport class MultiSelectDropdown extends CommonDropdownTreeLogic<\"multiSelectDropdown\"> {\n    private pillboxContainer!: HTMLElement;\n\n    constructor(element: HTMLElement, options: BaseOptions) {\n        super(element, options);\n        this.rootContainer = createContainer(element, constants.classNames.SimpleTree);\n        this.selected = this.dataService.getSelected();\n\n        this.dropdownHolder = createDropdownContainer();\n        this.tree = new BaseTree(this.dropdownHolder, options, this.dataService, this.eventManager, this.readOnly);\n        this.subscribe(constants.events.NodeSelected, (n: TreeNode) => this.nodeSelected(n));\n        this.renderSelectField(this.rootContainer);\n    }\n\n    /////////////////////////////// PUBLIC API ///////////////////////////////\n\n    public setSelected(value: TreeNode[]): void {\n        this.dataService.setSelected(...(value || []));\n        super.setSelected(this.dataService.getSelected());\n        this.renderPillboxes();\n    }\n\n    public setReadOnly(readOnly: boolean): void {\n        super.setReadOnly(readOnly);\n\n        if (readOnly && this.dropdownOpen) {\n            this.closeDropdown();\n        }\n    }\n\n    //////////////////////////////////////////////////////////////////////////\n\n    private nodeSelected(node: TreeNode): void {\n        const index = this.selected.findIndex((s) => s.value === node.value);\n        if (index !== -1) {\n            node.selected = false;\n            this.selected.splice(index, 1);\n        } else {\n            node.selected = true;\n            this.selected.push(node);\n        }\n\n        this.dataService.setSelected(...this.selected);\n        this.selected = this.dataService.getSelected();\n        this.renderPillboxes();\n        this.closeDropdown();\n        this.eventManager.publish(constants.events.SelectionChanged, this.selected);\n    }\n\n    private renderSelectField(container: HTMLElement): void {\n        this.selectContainer = createContainer(container, constants.classNames.SimpleTreeMultiSelectBox);\n        this.selectContainer.onclick = () => !this.readOnly && this.toggleDropdown();\n\n        this.pillboxContainer = createUnorderedList(this.selectContainer, constants.classNames.SimpleTreePillboxHolder);\n        this.renderPillboxes();\n\n        this.arrowElement = document.createElement(\"i\");\n        this.arrowElement.classList.add(constants.classNames.SimpleTreeChevronDown);\n        this.selectContainer.appendChild(this.arrowElement);\n    }\n\n    private renderPillboxes(): void {\n        this.pillboxContainer.innerHTML = \"\";\n        this.selected.forEach((item: TreeNode) => {\n            const listItem = createListItem(this.pillboxContainer, \"\");\n            listItem.innerHTML = this.options.templateSelectedText(item);\n\n            const cross: HTMLElement = createContainer(listItem, constants.classNames.SimpleTreePillboxCross);\n            cross.addEventListener(\"click\", (e: MouseEvent) => {\n                if (!this.readOnly) {\n                    this.nodeSelected(item);\n                }\n\n                e.stopPropagation();\n            });\n        });\n\n        if (this.options.clearButton && this.selected.length > 0 && !this.clearElement) {\n            this.clearElement = document.createElement(\"i\");\n            this.clearElement.classList.add(constants.classNames.SimpleTreeCross);\n            this.clearElement.onclick = (e: MouseEvent) => {\n                if (!this.readOnly) {\n                    this.setSelected([]);\n                    this.eventManager.publish(constants.events.SelectionChanged, []);\n                }\n\n                e.stopPropagation();\n            };\n\n            this.selectContainer.appendChild(this.clearElement);\n            this.selectContainer.classList.add(constants.classNames.SimpleTreeClearable);\n        } else if (this.selected.length === 0 && this.clearElement) {\n            this.clearElement.remove();\n            this.clearElement = null;\n        }\n    }\n}\n","import { BaseOptions } from \"../types/options\";\nimport { BaseTree } from \"./base-tree\";\nimport { createContainer } from \"./utils\";\nimport { TreeNode } from \"../types/tree-node\";\nimport constants from \"./ui-constants\";\nimport { CommonTreeLogic } from \"./common-tree-logic\";\n\nexport class TreeView extends CommonTreeLogic<\"tree\"> {\n    constructor(element: HTMLElement, options: BaseOptions) {\n        super(element, options);\n        this.rootContainer = createContainer(element, constants.classNames.SimpleTree, constants.classNames.SimpleTreeViewOnly);\n\n        if (options.checkboxes.active) {\n            this.selected = this.dataService.getSelected();\n        } else {\n            this.selected = this.dataService.getSelected()[0] || null;\n        }\n\n        this.tree = new BaseTree(this.rootContainer, options, this.dataService, this.eventManager, this.readOnly);\n        this.subscribe(constants.events.NodeSelected, (n: TreeNode) => this.nodeSelected(n));\n        this.tree.renderContent();\n        this.tree.activateKeyListener();\n    }\n\n    /////////////////////////////// PUBLIC API ///////////////////////////////\n\n    public setSelected(value: TreeNode | TreeNode[]): void {\n        if (this.options.checkboxes.active) {\n            this.dataService.setSelected(...((value as TreeNode[]) || []));\n            super.setSelected(this.dataService.getSelected());\n        } else {\n            this.dataService.setSelected((value as TreeNode) || []);\n            super.setSelected(this.dataService.getSelected()[0] || []);\n        }\n    }\n\n    public moveNode(value: TreeNode | string, direction: \"up\" | \"down\"): void {\n        this.dataService.moveNode(value, direction);\n        this.tree.renderContent();\n    }\n\n    //////////////////////////////////////////////////////////////////////////\n\n    private nodeSelected(node: TreeNode): void {\n        if (this.options.checkboxes.active) {\n            this.selected = this.dataService.getSelected();\n        } else {\n            if (node?.value === (this.selected as TreeNode)?.value) {\n                this.dataService.setSelected();\n                this.selected = null;\n                this.tree.highlightNode(null);\n            } else {\n                this.dataService.setSelected(node);\n                this.selected = this.dataService.getSelected()[0] || null;\n                this.tree.highlightNode(node);\n            }\n        }\n\n        this.eventManager.publish(constants.events.SelectionChanged, this.selected);\n    }\n}\n","import { TreeInstance, TreeModeNameMap } from \"./types/instance\";\nimport { Options, defaults, BaseOptions } from \"./types/options\";\nimport { SingleSelectDropdown } from \"./ui/single-select-dropdown\";\nimport { MultiSelectDropdown } from \"./ui/multi-select-dropdown\";\nimport { TreeView } from \"./ui/tree-view\";\n\nexport function createSimpleTree<K extends keyof TreeModeNameMap>(\n    element: HTMLElement,\n    mode: K,\n    instanceConfig: Options\n): TreeInstance<K> {\n    const config: BaseOptions = {\n        ...defaults,\n        ...instanceConfig,\n    };\n\n    if (mode === \"singleSelectDropdown\") {\n        return new SingleSelectDropdown(element, config as BaseOptions) as any;\n    } else if (mode === \"multiSelectDropdown\") {\n        return new MultiSelectDropdown(element, config as BaseOptions) as any;\n    } else {\n        return new TreeView(element, config as BaseOptions) as any;\n    }\n}\n","import { TreeInstance, SimpleTreeFn, TreeModeNameMap } from \"./types/instance\";\nimport { Options, ComponentMode } from \"./types/options\";\nimport { createSimpleTree } from \"./factory\";\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _simpleTree<K extends keyof TreeModeNameMap>(\n    nodeList: ArrayLike<Node>,\n    mode: K,\n    config?: Options\n): TreeInstance<K> | TreeInstance<K>[] {\n    // static list\n    const nodes = Array.prototype.slice.call(nodeList).filter((x) => x instanceof HTMLElement) as HTMLElement[];\n\n    const instances: TreeInstance<K>[] = [];\n    for (let i = 0; i < nodes.length; i++) {\n        const node: any = nodes[i];\n        try {\n            if (node._simpleTree !== undefined) {\n                node._simpleTree.destroy();\n                node._simpleTree = undefined;\n            }\n\n            node._simpleTree = createSimpleTree(node, mode, config || {});\n            instances.push(node._simpleTree);\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    return instances.length === 1 ? instances[0] : instances;\n}\n\nconst simpleTree = function (selector: ArrayLike<Node> | Node | string, mode: ComponentMode, config?: Options) {\n    if (typeof selector === \"string\") {\n        return _simpleTree(window.document.querySelectorAll(selector), mode, config);\n    } else if (selector instanceof Node) {\n        return _simpleTree([selector], mode, config);\n    } else {\n        return _simpleTree(selector, mode, config);\n    }\n} as SimpleTreeFn;\n\nexport default simpleTree;\n"],"names":["defaults"],"mappings":"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"}